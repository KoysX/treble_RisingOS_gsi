From c811db0a719f2f0873c298f9430aa716f283317a Mon Sep 17 00:00:00 2001
From: Kuaipz <2685697179@qq.com>
Date: Fri, 2 Jun 2023 01:09:30 +0800
Subject: [PATCH] 
 Call-Samsungs-ISehSysInputDev-to-report-screen-state-to-touchscreen-driver

Change-Id: I263c0fccd5a89d742724dd7476fa5aded5e53f4d
---
 services/core/Android.bp                      |  1 +
 .../server/display/LocalDisplayAdapter.java   | 31 +++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/services/core/Android.bp b/services/core/Android.bp
index a2986521..378ab62f 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -178,6 +178,7 @@ java_library_static {
         "overlayable_policy_aidl-java",
         "com.android.sysprop.watchdog",
         "faceunlock_framework",
+        "vendor.samsung.hardware.sysinput-V1.2-java",
         "kotlin-stdlib",
         "kotlinx_coroutines_android",
         "kotlinx_coroutines",
diff --git a/services/core/java/com/android/server/display/LocalDisplayAdapter.java b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
index efb2cb7a..2807f3e7 100644
--- a/services/core/java/com/android/server/display/LocalDisplayAdapter.java
+++ b/services/core/java/com/android/server/display/LocalDisplayAdapter.java
@@ -33,6 +33,7 @@ import android.os.Trace;
 import android.util.DisplayUtils;
 import android.util.LongSparseArray;
 import android.util.Slog;
+import android.util.Log;
 import android.util.SparseArray;
 import android.view.Display;
 import android.view.DisplayAddress;
@@ -48,6 +49,8 @@ import com.android.server.LocalServices;
 import com.android.server.lights.LightsManager;
 import com.android.server.lights.LogicalLight;
 
+import vendor.samsung.hardware.sysinput.V1_1.ISehSysInputDev;
+
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -226,6 +229,8 @@ final class LocalDisplayAdapter extends DisplayAdapter {
 
         private DisplayEventReceiver.FrameRateOverride[] mFrameRateOverrides =
                 new DisplayEventReceiver.FrameRateOverride[0];
+        private boolean triedSamsungHal = false;
+        private ISehSysInputDev samsungSysinput = null;
 
         LocalDisplayDevice(IBinder displayToken, long physicalDisplayId,
                 SurfaceControl.StaticDisplayInfo staticDisplayInfo,
@@ -812,16 +817,42 @@ final class LocalDisplayAdapter extends DisplayAdapter {
                             }
                             mSidekickActive = false;
                         }
+                        if (!triedSamsungHal) {
+                            triedSamsungHal = true;
+                            try {
+                                samsungSysinput = ISehSysInputDev.getService();
+                            } catch(Throwable t) {}
+                        }
                         final int mode = getPowerModeForState(state);
                         Trace.traceBegin(Trace.TRACE_TAG_POWER, "setDisplayState("
                                 + "id=" + physicalDisplayId
                                 + ", state=" + Display.stateToString(state) + ")");
+
+                        if (samsungSysinput != null) {
+                            try {
+                                Log.d("PHH", "setTspEnable 1, " + state + ", true");
+                                samsungSysinput.setTspEnable(1, state, true);
+                            } catch(Throwable t) {
+                                Log.d("PHH", "Failed settings tsp enable", t);
+                            }
+                        }
+
                         try {
                             mSurfaceControlProxy.setDisplayPowerMode(token, mode);
                             Trace.traceCounter(Trace.TRACE_TAG_POWER, "DisplayPowerMode", mode);
                         } finally {
                             Trace.traceEnd(Trace.TRACE_TAG_POWER);
                         }
+
+                        if (samsungSysinput != null) {
+                            try {
+                                Log.d("PHH", "setTspEnable 1, " + state + ", false");
+                                samsungSysinput.setTspEnable(1, state, false);
+                            } catch(Throwable t) {
+                                Log.d("PHH", "Failed settings tsp enable", t);
+                            }
+                        }
+
                         // If we're entering a suspended (but not OFF) power state and we
                         // have a sidekick available, tell it now that it can take control.
                         if (Display.isSuspendedState(state) && state != Display.STATE_OFF
-- 
2.40.1

